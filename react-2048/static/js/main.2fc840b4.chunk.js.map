{"version":3,"sources":["Components/Header/index.tsx","Components/Header/styles.ts","Components/Header/strings.ts","Components/FieldContainer/config.ts","Components/FieldContainer/index.tsx","Components/FieldContainer/styles.ts","Components/Cell/config.ts","Components/Cell/utils.ts","Components/CellContainer/index.tsx","Components/CellContainer/styles.ts","Components/Cell/index.tsx","Components/Cell/styles.ts","Components/Field/index.tsx","Components/Records/config.ts","Components/Records/index.tsx","Components/Records/styles.ts","Components/Records/strings.ts","Containers/Game/selectors.ts","models/vector/index.ts","Containers/State/selectors.ts","Containers/State/index.tsx","Containers/Game/actions.ts","setup/history/index.ts","Containers/ControlPanel/config.ts","Containers/ControlPanel/index.tsx","Components/FieldHeader/index.tsx","Containers/Settings/selectors.ts","Containers/Game/index.tsx","Components/TextFieldGroup/index.tsx","Components/TextFieldGroup/styles.ts","Containers/Settings/config.ts","Containers/Settings/actions.ts","Containers/Settings/index.tsx","Components/GameContainer/index.tsx","Components/GameContainer/styles.ts","Components/Main/index.tsx","Components/Layout/index.tsx","setup/theme/index.ts","models/cell/index.ts","models/field/utils.ts","models/field/index.ts","models/data/index.ts","models/settings/index.ts","models/recordElement/index.ts","models/state/index.ts","Containers/State/actions.ts","store/actions.ts","store/reducers.ts","Containers/Game/reducer.ts","Containers/Settings/reducer.ts","Containers/State/reducer.ts","engine/utils/iteratetion.ts","engine/utils/cellsMover.ts","engine/doNextGameStep.ts","engine/utils/cellsColitions.ts","engine/selectRandomAvaibleCellIndex.ts","models/vector/constants.ts","Containers/Game/epics/keyboardEpics.ts","store/utils.ts","utils/index.ts","Containers/Game/epics/initEpics.ts","Containers/Game/epics/index.ts","Containers/Settings/epics.ts","store/epics.ts","store/index.ts","setup/Providers/index.tsx","index.tsx"],"names":["withStyles","theme","createStyles","title","fontFamily","_ref","classes","react_default","a","createElement","AppBar","color","position","Box","display","justifyContent","alignItems","p","mr","Typography","gutterBottom","className","variant","fieldSizes","xs","sm","md","lg","xl","withWidth","root","backgroundColor","palette","primary","main","padding","boxSizing","borderRadius","shape","background","width","height","top","left","transform","overflow","concat","common","white","default","children","settings","sizeStyle","columns","rows","style","MIN_VALUE","MAX_VALUE","FIRST_COLOR","blue","green","red","SECOND_COLOR","selectColor","startColor","endColor","ratio","selectBetween","Math","floor","selectCellColor","value","colorRatio","selectColorRatio","transition","size","currentPosition","previousPosition","positionStyles","y","x","ref","el","setTimeout","Object","objectSpread","withTheme","side","spacing","black","circle","opacity","cell","cellColor","Components_CellContainer","getContrastText","getValue","field","prevField","cellSize","FieldContainer","cells","map","getCellPosition","Components_Cell","key","id","recordFontSizes","typography","record","fontSize","getCellsSumValue","selectCurrentField","state","current","selectPreviousField","previous","VectorRecord","_Record","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","vector","A","diractionRatio","length","undefined","cos","toFixed","sin","Record","selectFieldState","mapState","fieldState","Field","_useMappedState","useMappedState","recordPosition","image","Components_Records","getRecordByPosition","initFieldAction","createStandardAction","initFieldFromLocalStorageAction","setCurrentFieldAction","setPreviousFieldAction","moveCellsAction","returnPrevFieldAction","createBrowserHistory","fabSizes","dispatch","useDispatch","mb","Fab","aria-label","onClick","disabled","equals","Reply_default","ml","Cached_default","history","push","Settings_default","FieldHeader","flexDirection","flexWrap","State","Containers_ControlPanel","selectSettings","fieldSettings","Game","_useState","useState","_useState2","slicedToArray","isInitField","setIsInitField","useEffect","Fragment","Components_FieldHeader","Components_Field","minWidth","avaibleSizesForField","setFieldRowsAction","setFieldColumnsAction","setFieldSettingsAction","Settings","rowsInputValue","setRowsInputValue","_useState3","_useState4","columnsInputValue","setColumnsInputValue","menuItemsForSelectors","elem","MenuItem","TextFieldGroup","TextField","select","fullWidth","label","onChange","target","_ref2","Button","Paper","Main","Components_GameContainer","react_router","exact","path","Containers_Game","Containers_Settings","Layout","Components_Header","Components_Main","createMuiTheme","grey","CellRecord","pow","initParams","random","initCells","cellList","List","init","defaultField","FieldRecord","reduce","result","findIndex","cellOne","get","Error","_this","update","set","vectorOne","vectorTwo","savedCellForSwape","getCell","setCell","defaultFieldState","FieldDataRecord","FieldSettingsRecord","defaultRecordElementValue","RecordElementRecord","records","FieldStateRecord","prevRecordValue","cellsValueSum","find","setFieldRecordsAction","actions","FieldActions","FieldSettingActions","FieldRecordsActions","rootReducer","combineReducers","action","type","getType","fieldActions","payload","fieldSettingActions","updateRecordValue","selectIterationStartPoint","diraction","Deg90","PI","turned90DegDiraction","turn","cellsMover","postIterPoint","iterPoint","hasCell","plus","swapeCells","minus","doNextGameStep","coalitionCells","cellsColitions","selectRandomAvaibleCellPoint","avaibleCells","filter","randonAvaibleCellIndex","selectedCell","cellsIndex","DIRACTIONS","RIGHT","LEFT","UP","DOWN","NULL","keyboard$","fromEvent","window","moveDiractionFromKeyboardEventEpic","pipe","event","returnPrevFieldFromKeyboardEventEpic","debouncedSaveState","func","timeoutId","waitMilliseconds","options","isImmediate","_len","args","Array","_key","context","shouldCallNow","clearTimeout","debounce","serializedState","JSON","stringify","localStorage","setItem","_unused","initFieldEpic","action$","state$","isActionOf","switchMap","_state$$value$setting","of","initFieldFromLocalStorageEpic","stateFromLocalStorage","getItem","parsedSerializedState","parse","err","loadState","moveFieldEpic","debounceTime","savedField","changedField","empty","returnPrevFieldEpic","clear","combineEpics","toConsumableArray","values","fieldEpics","fieldSettingsEpics","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","epicMiddleware","createEpicMiddleware","middleware","store","createStore","applyMiddleware","run","rootEpic","subscribe","getState","Providers","ThemeProvider","index_es","Provider","CssBaseline","ReactDOM","render","setup_Providers","Components_Layout","document","getElementById"],"mappings":"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","file":"static/js/main.2fc840b4.chunk.js","sourcesContent":["import React from 'react'\nimport withStyles, { WithStyles } from '@material-ui/core/styles/withStyles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\n\nimport { styles } from './styles'\nimport * as strings from './strings'\n\ntype ClassNames = WithStyles<typeof styles>\n\ninterface IProps extends ClassNames {}\n\nconst Header = ({ classes }: IProps) => (\n  <AppBar\n    color='primary'\n    position='static'\n  >\n    <Box\n      display='flex'\n      justifyContent='space-between'\n      alignItems='center'\n      p={1}\n    >\n      <Box mr={1}>\n        <Typography\n          gutterBottom\n          className={classes.title}\n          variant='h3'\n          color='inherit'\n        >{strings.title}</Typography>\n      </Box>\n      <Box>\n        <Typography\n          gutterBottom\n          className={classes.title}\n          variant='caption'\n          color='inherit'\n        >{strings.copyright}</Typography>\n      </Box>\n    </Box>\n  </AppBar>\n)\n\nexport default withStyles(styles)(Header)\n","import { createStyles, Theme } from '@material-ui/core'\n\nexport const styles = (theme: Theme) =>\n  createStyles({\n    title: {\n      fontFamily: '\\'ZCOOL KuaiLe\\', cursive',\n    },\n  })\n","export const title = '2048'\n\nexport const copyright = '\\u00A9 Димонстрационный проект Палкина Льва.'\n","import { Breakpoint } from '@material-ui/core/styles/createBreakpoints'\n\nexport const fieldSizes: {\n  [K in Breakpoint]: number\n} = {\n  xs: 200,\n  sm: 300,\n  md: 400,\n  lg: 400,\n  xl: 400,\n}\n","import React from 'react'\nimport withStyles, { WithStyles } from '@material-ui/core/styles/withStyles'\nimport withWidth, { WithWidth } from '@material-ui/core/withWidth'\n\nimport { FieldSettingsRecord } from '../../models/settings'\n\nimport { styles } from './styles'\nimport { fieldSizes } from './config'\n\ntype ClassNames = WithStyles<typeof styles>\n\ninterface IProps extends ClassNames,\n  WithWidth {\n  children: React.ReactNode\n  settings: FieldSettingsRecord\n}\n\nconst Field = ({\n  classes,\n  children,\n  settings,\n  width,\n}: IProps) => {\n  const sizeStyle: React.CSSProperties = {\n    width: settings.columns > settings.rows\n      ? fieldSizes[width]\n      : fieldSizes[width] / settings.rows * settings.columns,\n    height: settings.columns > settings.rows\n      ? fieldSizes[width] / settings.columns * settings.rows\n      : fieldSizes[width],\n  }\n  return (\n    <div className={classes.root} style={sizeStyle}>\n      <div className={classes.background}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nexport default withWidth()(withStyles(styles)(Field))\n","import { createStyles, Theme } from '@material-ui/core'\n\nexport const styles = (theme: Theme) => {\n  const borderWidth = 4\n  return createStyles({\n    root: {\n      position: 'relative',\n      backgroundColor: theme.palette.primary.main,\n      padding: borderWidth,\n      boxSizing: 'content-box',\n      borderRadius: theme.shape.borderRadius * 4,\n    },\n    background: {\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      borderRadius: theme.shape.borderRadius * 4,\n      overflow: 'hidden',\n      background: `linear-gradient(to right, ${\n        theme.palette.common.white\n      }, ${\n        theme.palette.background.default\n      });`,\n    },\n  })\n}\n","import { IColor } from './types'\n\nexport const MIN_VALUE = 0\nexport const MAX_VALUE = 15\n\nexport const FIRST_COLOR: IColor = {\n  blue: 150,\n  green: 207,\n  red: 255,\n}\n\nexport const SECOND_COLOR: IColor = {\n  blue: 68,\n  green: 68,\n  red: 244,\n}\n","import {\n  MIN_VALUE,\n  MAX_VALUE,\n  FIRST_COLOR,\n  SECOND_COLOR,\n} from './config'\n\nfunction selectColorRatio(value: number): number {\n  if (value < MIN_VALUE) {\n    return MIN_VALUE\n  }\n  if (value > MAX_VALUE) {\n    return MAX_VALUE\n  }\n  return value / MAX_VALUE\n}\n\nfunction selectColor(startColor: number, endColor: number, ratio: number) {\n  const selectBetween = endColor - startColor\n  return startColor + Math.floor(selectBetween * ratio)\n}\n\nexport function selectCellColor(value: number) {\n  const colorRatio = selectColorRatio(value)\n  return `rgb(${\n    selectColor(FIRST_COLOR.red, SECOND_COLOR.red, colorRatio)\n  },${\n    selectColor(FIRST_COLOR.green, SECOND_COLOR.green, colorRatio)\n  },${\n    selectColor(FIRST_COLOR.blue, SECOND_COLOR.blue, colorRatio)\n  })`\n}\n","import React from 'react'\nimport withStyles, { WithStyles } from '@material-ui/core/styles/withStyles'\n\nimport { VectorRecord } from '../../models/vector'\n\nimport { styles } from './styles'\n\ntype ClassNames = WithStyles<typeof styles>\n\ninterface IProps extends ClassNames {\n  children: React.ReactNode\n  size: number\n  currentPosition?: VectorRecord\n  previousPosition?: VectorRecord\n}\n\nconst CellContainer = ({\n  classes,\n  size,\n  children,\n  currentPosition,\n  previousPosition,\n}: IProps) => {\n  let positionStyles: React.CSSProperties = {}\n  if (currentPosition && previousPosition) {\n    positionStyles = {\n      top: `${size * previousPosition.y}px`,\n      left: `${size * previousPosition.x}px`,\n    }\n  }\n  if (currentPosition && !previousPosition) {\n    positionStyles = {\n      top: `${size * currentPosition.y}px`,\n      left: `${size * currentPosition.x}px`,\n      transform: 'scale(0)',\n    }\n  }\n  return (\n    <div\n      ref={(el) => {\n        setTimeout(() => {\n          if (el) {\n            if (currentPosition) {\n              el.style.top = `${size * currentPosition.y}px`\n              el.style.left = `${size * currentPosition.x}px`\n            }\n            if (!previousPosition) {\n              el.style.transform = 'scale(1)'\n            }\n          }\n        }, 0)\n      }}\n      className={classes.root}\n      style={{\n        width: `${size}px`,\n        height: `${size}px`,\n        ...positionStyles,\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport default withStyles(styles)(CellContainer)\n","import { createStyles } from '@material-ui/core'\n\nexport const styles = () =>\n  createStyles({\n    root: {\n      position: 'absolute',\n      transition: '0.2s width, 0.2s height, 0.2s top, 0.2s left, 0.3s transform',\n    },\n  })\n","import React from 'react'\n\nimport withStyles, { WithStyles } from '@material-ui/core/styles/withStyles'\nimport withTheme, { WithTheme } from '@material-ui/core/styles/withTheme'\nimport Typography from '@material-ui/core/Typography'\nimport { styles } from './styles'\nimport { selectCellColor } from './utils'\n\nimport { CellRecord } from '../../models/cell'\nimport { VectorRecord } from '../../models/vector'\nimport CellContainer from '../CellContainer'\n\ntype ClassNames = WithStyles<typeof styles>\n\ninterface IProps extends ClassNames,\nWithTheme {\n  cell: CellRecord\n  size: number\n  currentPosition?: VectorRecord\n  previousPosition?: VectorRecord\n}\n\nconst Cell = ({\n  classes,\n  size,\n  cell,\n  currentPosition,\n  previousPosition,\n  theme,\n}: IProps) => {\n  const cellColor = selectCellColor(cell.value)\n  return (\n    <CellContainer\n      size={size}\n      currentPosition={currentPosition}\n      previousPosition={previousPosition}\n    >\n      <span\n        className={classes.side}\n        style={{ backgroundColor: cellColor }}\n      />\n      <div\n        className={classes.root}\n        style={{ backgroundColor: cellColor }}\n      >\n        <span className={classes.circle} />\n        <Typography\n          className={classes.value}\n          style={{ color: theme.palette.getContrastText(cellColor) }}\n        >\n          {cell.getValue()}\n        </Typography>\n      </div>\n    </CellContainer>\n  )\n}\n\nexport default withTheme(withStyles(styles)(Cell))\n","import { createStyles, Theme } from '@material-ui/core'\n\nexport const styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      position: 'absolute',\n      alignItems: 'center',\n      height: '100%',\n      width: '100%',\n      justifyContent: 'center',\n      borderRadius: theme.shape.borderRadius * 4,\n    },\n    side: {\n      display: 'block',\n      position: 'absolute',\n      top: theme.spacing(0.5),\n      width: '100%',\n      height: '100%',\n      background: `radial-gradient(ellipse at right, ${\n        theme.palette.common.black\n      }, transparent)`,\n      borderRadius: theme.shape.borderRadius * 4,\n    },\n    circle: {\n      position: 'absolute',\n      borderRadius: '50%',\n      width: '80%',\n      height: '80%',\n      background: `radial-gradient(ellipse at right, ${\n        theme.palette.common.black\n      }, transparent)`,\n      opacity: 0.1,\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n    },\n    value: {},\n  })\n","import React from 'react'\nimport withWidth, { WithWidth } from '@material-ui/core/withWidth'\n\nimport { FieldRecord } from '../../models/field'\nimport { FieldSettingsRecord } from '../../models/settings'\nimport FieldContainer from '../FieldContainer'\nimport { fieldSizes } from '../FieldContainer/config'\nimport Cell from '../Cell'\n\ninterface IProps extends WithWidth {\n  field: FieldRecord\n  prevField: FieldRecord\n  settings: FieldSettingsRecord\n}\n\nconst Field = ({\n  width,\n  settings,\n  field,\n  prevField,\n}: IProps) => {\n  const cellSize = settings.columns > settings.rows\n    ? fieldSizes[width] / field.columns\n    : fieldSizes[width] / settings.rows * settings.columns / field.columns\n  return (\n    <FieldContainer settings={settings}>\n      {field.cells.map((cell) => {\n        const currentPosition = field.getCellPosition(cell)\n        const previousPosition = prevField.getCellPosition(cell)\n        return cell.value\n          ? (\n            <Cell\n              key={cell.id}\n              cell={cell}\n              size={cellSize}\n              currentPosition={currentPosition}\n              previousPosition={previousPosition}\n            />\n          )\n          : null\n      })}\n    </FieldContainer>\n  )\n}\n\nexport default withWidth()(Field)\n","import { Breakpoint } from '@material-ui/core/styles/createBreakpoints'\n\nexport const recordFontSizes: {\n  [K in Breakpoint]: number\n} = {\n  xs: 20,\n  sm: 20,\n  md: 30,\n  lg: 30,\n  xl: 30,\n}\n","import React from 'react'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport withStyles, { WithStyles } from '@material-ui/core/styles/withStyles'\nimport withWidth, { WithWidth } from '@material-ui/core/withWidth'\n\nimport { FieldRecord } from '../../models/field'\nimport { RecordElementRecord } from '../../models/recordElement'\n\nimport * as strings from './strings'\nimport { styles } from './styles'\nimport { recordFontSizes } from './config'\n\ntype ClassNames = WithStyles<typeof styles>\n\ninterface IProps extends ClassNames,\n  WithWidth {\n  field: FieldRecord\n  record?: RecordElementRecord\n}\n\nconst Records = ({\n  classes,\n  field,\n  record,\n  width,\n}: IProps) => (\n  <Box display='flex'>\n    <Box mr={1}>\n      <Typography\n        gutterBottom\n        className={classes.typography}\n        variant='h3'\n        color='primary'\n        style={{ fontSize: recordFontSizes[width] }}\n      >\n        {`${strings.bestRecord}: ${record ? record.value : 0}`}\n      </Typography>\n    </Box>\n    <Box mr={1}>\n      <Typography\n        gutterBottom\n        className={classes.typography}\n        variant='h3'\n        color='primary'\n        style={{ fontSize: recordFontSizes[width] }}\n      >{`${strings.score}: ${field.getCellsSumValue()}`}</Typography>\n    </Box>\n  </Box>\n)\n\nexport default withWidth()(withStyles(styles)(Records))\n","import { createStyles } from '@material-ui/core'\n\nexport const styles = () =>\n  createStyles({\n    typography: {\n      fontFamily: '\\'Teko\\', sans-serif;',\n    },\n  })\n","export const bestRecord = 'Best record'\n\nexport const score = 'Score'\n","import { RootState } from '../../store/types'\n\nexport function selectCurrentField(state: RootState) {\n  return state.field.current\n}\n\nexport function selectPreviousField(state: RootState) {\n  return state.field.previous\n}\n","import { Record } from 'immutable'\n\nimport { IVector } from './types'\n\nconst defaultVector: IVector = { x: 0, y: 0 }\n\nexport class VectorRecord extends Record<IVector>(defaultVector) {\n  public image(): VectorRecord {\n    return new VectorRecord({\n      x: this.y,\n      y: this.x,\n    })\n  }\n\n  public opposed(): VectorRecord {\n    return new VectorRecord({\n      x: -this.x,\n      y: -this.y,\n    })\n  }\n\n  public plus(vector: VectorRecord): VectorRecord {\n    return new VectorRecord({\n      x: this.x + vector.x,\n      y: this.y + vector.y,\n    })\n  }\n\n  public turn(A: number, diractionRatio = 1): VectorRecord {\n    return new VectorRecord({\n      x: this.x * +Math.cos(A).toFixed(10) + this.y * +Math.sin(A).toFixed(10) * diractionRatio,\n      y: this.x * +Math.sin(A).toFixed(10) * (-diractionRatio) + this.y * +Math.cos(A).toFixed(10),\n    })\n  }\n\n  public minus(vector: VectorRecord): VectorRecord {\n    return new VectorRecord({\n      x: this.x - vector.x,\n      y: this.y - vector.y,\n    })\n  }\n}\n","import { RootState } from '../../store/types'\n\nexport function selectFieldState(state: RootState) {\n  return state.state\n}\n","import React from 'react'\nimport { useMappedState } from 'redux-react-hook'\n\nimport { RootState } from '../../store/types'\nimport Records from '../../Components/Records'\nimport { selectCurrentField } from '../Game/selectors'\nimport { VectorRecord } from '../../models/vector'\n\nimport { selectFieldState } from './selectors'\n\nconst mapState = (state: RootState) => ({\n  fieldState: selectFieldState(state),\n  field: selectCurrentField(state),\n})\n\nconst Field = () => {\n  const {\n    field,\n    fieldState,\n  } = useMappedState(mapState)\n  let recordPosition = new VectorRecord({\n    x: field.columns,\n    y: field.rows,\n  })\n  recordPosition = field.columns > field.rows\n    ? recordPosition\n    : recordPosition.image()\n  return (\n    <Records\n      record={fieldState.getRecordByPosition(recordPosition)}\n      field={field}\n    />\n  )\n}\nexport default Field\n","import { createStandardAction } from 'typesafe-actions'\n\nimport { VectorRecord } from '../../models/vector'\nimport { FieldRecord } from '../../models/field'\n\nexport const initFieldAction = createStandardAction('field/INIT_FIELD')()\n\nexport const initFieldFromLocalStorageAction = createStandardAction(\n  'field/INIT_FIELD_FROM_LOCAL_STORAGE',\n)()\n\nexport const setCurrentFieldAction = createStandardAction('field/SET_CURRENT_FIELD')<FieldRecord>()\n\nexport const setPreviousFieldAction = createStandardAction('field/SET_PREVIOUS_FIELD')<FieldRecord>()\n\nexport const moveCellsAction = createStandardAction('field/MOVE_CELLS')<VectorRecord>()\n\nexport const returnPrevFieldAction = createStandardAction('field/RETURN_PREVIOUS_FIELD')()\n","import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory({})\n","import Fab from '@material-ui/core/Fab'\nimport { Breakpoint } from '@material-ui/core/styles/createBreakpoints'\n\nexport const fabSizes: {\n  [K in Breakpoint]: React.ComponentProps<typeof Fab>['size']\n} = {\n  xs: 'small',\n  sm: 'small',\n  md: 'medium',\n  lg: 'medium',\n  xl: 'large',\n}\n","import React from 'react'\nimport { useDispatch, useMappedState } from 'redux-react-hook'\nimport Fab from '@material-ui/core/Fab'\nimport Cached from '@material-ui/icons/Cached'\nimport Settings from '@material-ui/icons/Settings'\nimport Reply from '@material-ui/icons/Reply'\nimport Box from '@material-ui/core/Box'\nimport withWidth, { WithWidth } from '@material-ui/core/withWidth'\n\nimport {\n  initFieldAction,\n  returnPrevFieldAction,\n} from '../Game/actions'\nimport {\n  selectCurrentField,\n  selectPreviousField,\n} from '../Game/selectors'\nimport { RootState } from '../../store/types'\nimport history from '../../setup/history'\n\nimport { fabSizes } from './config'\n\nconst mapState = (state: RootState) => ({\n  field: selectCurrentField(state),\n  prevField: selectPreviousField(state),\n})\n\ninterface IProps extends WithWidth {}\n\nconst ControlPanel = ({ width }: IProps) => {\n  const dispatch = useDispatch()\n  const {\n    field,\n    prevField,\n  } = useMappedState(mapState)\n  return (\n    <Box display='flex'>\n      <Box mb={1}>\n        <Fab\n          color='primary'\n          aria-label='Previous Field'\n          size={fabSizes[width]}\n          onClick={() => dispatch(returnPrevFieldAction())}\n          disabled={field.cells.equals(prevField.cells)}\n        >\n          <Reply />\n        </Fab>\n      </Box>\n      <Box mb={1} ml={1}>\n        <Fab\n          color='primary'\n          aria-label='Restart'\n          size={fabSizes[width]}\n          onClick={() => dispatch(initFieldAction())}\n        >\n          <Cached />\n        </Fab>\n      </Box>\n      <Box mb={1} ml={1}>\n        <Fab\n          aria-label='Settings'\n          size={fabSizes[width]}\n          color='primary'\n          onClick={() => history.push('/settings')}\n        >\n          <Settings />\n        </Fab>\n      </Box>\n    </Box>\n  )\n}\n\nexport default withWidth()(ControlPanel)\n","import React from 'react'\nimport Box from '@material-ui/core/Box'\n\nimport State from '../../Containers/State'\nimport ControlPanel from '../../Containers/ControlPanel'\n\nconst FieldHeader = () => (\n  <Box\n    display='flex'\n    justifyContent='space-between'\n    alignItems='center'\n    flexDirection='row'\n    flexWrap='wrap'\n  >\n    <State />\n    <ControlPanel />\n  </Box>\n)\n\nexport default FieldHeader\n","import { RootState } from '../../store/types'\n\nexport function selectSettings(state: RootState) {\n  return state.settings\n}\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useMappedState } from 'redux-react-hook'\n\nimport FieldView from '../../Components/Field'\nimport { RootState } from '../../store/types'\nimport FieldHeader from '../../Components/FieldHeader'\n\nimport { selectSettings } from '../Settings/selectors'\n\nimport { initFieldFromLocalStorageAction } from './actions'\nimport {\n  selectCurrentField,\n  selectPreviousField,\n} from './selectors'\n\nconst mapState = (state: RootState) => ({\n  field: selectCurrentField(state),\n  prevField: selectPreviousField(state),\n  fieldSettings: selectSettings(state),\n})\n\nconst Game = () => {\n  const dispatch = useDispatch()\n  const {\n    field,\n    prevField,\n    fieldSettings,\n  } = useMappedState(mapState)\n  const [isInitField, setIsInitField] = useState(false)\n  useEffect(() => {\n    if (!isInitField) {\n      dispatch(initFieldFromLocalStorageAction())\n      setIsInitField(true)\n    }\n  })\n  return (\n    <>\n      <FieldHeader />\n      <FieldView\n        field={field}\n        prevField={prevField}\n        settings={fieldSettings}\n      />\n    </>\n  )\n}\n\nexport default Game\n","import React from 'react'\nimport withStyles, { WithStyles } from '@material-ui/core/styles/withStyles'\n\nimport { styles } from './styles'\n\ntype ClassNames = WithStyles<typeof styles>\n\ninterface IProps extends ClassNames {\n  children: React.ReactNode\n}\n\nconst CellContainer = ({\n  classes,\n  children,\n}: IProps) => (\n  <form className={classes.root}>\n    {children}\n  </form>\n)\n\nexport default withStyles(styles)(CellContainer)\n","import { createStyles } from '@material-ui/core'\n\nexport const styles = () =>\n  createStyles({\n    root: {\n      display: 'flex',\n      minWidth: 200,\n      flexDirection: 'column',\n    },\n  })\n","export const avaibleSizesForField = [\n  2, 3, 4, 5, 6, 7,\n]\n","import { createStandardAction } from 'typesafe-actions'\n\nimport { IFieldSettings } from '../../models/settings/types'\n\nexport const setFieldRowsAction = createStandardAction('field/SET_ROWS')<number>()\n\nexport const setFieldColumnsAction = createStandardAction('field/SET_COLUMNS')<number>()\n\nexport const setFieldSettingsAction = createStandardAction('field/SET_FIELD_SETTINGS')<IFieldSettings>()\n","import React, { useState } from 'react'\nimport { useDispatch, useMappedState } from 'redux-react-hook'\nimport Button from '@material-ui/core/Button'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport TextField from '@material-ui/core/TextField'\nimport Box from '@material-ui/core/Box'\n\nimport history from '../../setup/history'\nimport { RootState } from '../../store/types'\nimport { initFieldAction } from '../Game/actions'\nimport TextFieldGroup from '../../Components/TextFieldGroup'\n\nimport { selectSettings } from './selectors'\nimport { avaibleSizesForField } from './config'\nimport { setFieldSettingsAction } from './actions'\n\nconst mapState = (state: RootState) => ({\n  fieldSettings: selectSettings(state),\n})\n\nconst Settings = () => {\n  const dispatch = useDispatch()\n  const { fieldSettings } = useMappedState(mapState)\n  const [rowsInputValue, setRowsInputValue] = useState(fieldSettings.rows)\n  const [columnsInputValue, setColumnsInputValue] = useState(fieldSettings.columns)\n  const menuItemsForSelectors = avaibleSizesForField.map((elem) => <MenuItem key={elem} value={elem}>{elem}</MenuItem>)\n  return (\n    <TextFieldGroup>\n      <Box mb={1}>\n        <TextField\n          select\n          fullWidth\n          label='Rows amout:'\n          title='Rows'\n          value={rowsInputValue}\n          onChange={({ target: { value } }) => setRowsInputValue(+value)}\n        >{menuItemsForSelectors}</TextField>\n      </Box>\n      <Box mb={1}>\n        <TextField\n          select\n          fullWidth\n          label='Columns amout:'\n          title='Columns'\n          value={columnsInputValue}\n          onChange={({ target: { value } }) => setColumnsInputValue(+value)}\n        >{menuItemsForSelectors}</TextField>\n      </Box>\n      <Box mb={1}>\n        <Button\n          color='primary'\n          variant='contained'\n          onClick={() => {\n            dispatch(setFieldSettingsAction({\n              rows: rowsInputValue,\n              columns: columnsInputValue,\n            }))\n            dispatch(initFieldAction())\n            history.push('/')\n          }}\n        >Submit</Button>\n      </Box>\n    </TextFieldGroup>\n  )\n}\n\nexport default Settings\n","import React from 'react'\nimport withStyles, { WithStyles } from '@material-ui/core/styles/withStyles'\nimport Box from '@material-ui/core/Box'\nimport Paper from '@material-ui/core/Paper'\n\nimport { styles } from './styles'\n\ntype ClassNames = WithStyles<typeof styles>\n\ninterface IProps extends ClassNames {\n  children: React.ReactNode\n}\n\nconst GameContainer = ({\n  classes,\n  children,\n}: IProps) => {\n  return (\n    <Paper className={classes.root}>\n      <Box\n        display='flex'\n        flexDirection='column'\n        alignItems='center'\n      >\n        {children}\n      </Box>\n    </Paper>\n  )\n}\n\nexport default withStyles(styles)(GameContainer)\n","import { createStyles, Theme } from '@material-ui/core'\n\nexport const styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(2),\n    },\n  })\n","import React from 'react'\nimport {\n  Route,\n  Switch,\n} from 'react-router-dom'\nimport Box from '@material-ui/core/Box'\n\nimport Field from '../../Containers/Game'\nimport Settings from '../../Containers/Settings'\nimport GameContainer from '../GameContainer'\n\nconst Main = () => (\n  <Box\n    display='flex'\n    justifyContent='center'\n    p={4}\n  >\n    <Box>\n      <GameContainer>\n        <Switch>\n          <Route exact path='/'>\n            <Field />\n          </Route>\n          <Route exact path='/settings'>\n            <Settings />\n          </Route>\n        </Switch>\n      </GameContainer>\n    </Box>\n  </Box>\n)\n\nexport default Main\n","import React from 'react'\n\nimport Header from '../Header'\nimport Main from '../Main'\n\nconst Layout = () => (\n  <div>\n    <Header />\n    <Main />\n  </div>\n)\n\nexport default Layout\n","import { createMuiTheme } from '@material-ui/core/styles'\nimport blue from '@material-ui/core/colors/blue'\nimport grey from '@material-ui/core/colors/grey'\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: blue,\n    background: {\n      default: grey[200],\n    },\n  },\n})\n","import { Record } from 'immutable'\n\nimport {\n  ICell,\n  ICellInitParams,\n} from './types'\n\nconst defaultCell: ICell = {\n  value: 0,\n  id: 0,\n}\n\nexport class CellRecord extends Record<ICell>(defaultCell) {\n  public static init(initParams: ICellInitParams): CellRecord {\n    return new CellRecord({\n      value: initParams.value,\n      id: Math.random(),\n    })\n  }\n\n  public getValue(): number {\n    return Math.pow(2, this.value)\n  }\n}\n","import { List } from 'immutable'\n\nimport { CellRecord } from '../cell'\n\nexport function initCells(\n  columns: number,\n  rows: number,\n): List<CellRecord> {\n  let cellList = List<CellRecord>()\n  for (let y = 0; y < rows * columns; y++) {\n    cellList = cellList.push(\n      CellRecord.init({ value: 0 }),\n    )\n  }\n  return cellList\n}\n","import { List, Record } from 'immutable'\n\nimport { CellRecord } from '../cell'\nimport { VectorRecord } from '../vector'\n\nimport { initCells } from './utils'\nimport {\n  IField,\n  IFieldInitParams,\n} from './types'\n\nconst defaultField: IField = {\n  rows: 0,\n  columns: 0,\n  cells: List(),\n}\n\nexport class FieldRecord extends Record<IField>(defaultField) {\n  public static init({ columns, rows }: IFieldInitParams): FieldRecord {\n    return new FieldRecord({\n      rows,\n      columns,\n      cells: initCells(columns, rows),\n    })\n  }\n\n  public getCellsSumValue() {\n    return this.cells.reduce((result, cell) => cell.value !== 0\n      ? result + cell.getValue()\n      : result, 0)\n  }\n\n  public getCellPosition(cell: CellRecord): VectorRecord | undefined {\n    const position = this.cells.findIndex((cellOne) => cellOne.id === cell.id)\n    return position !== -1\n      ? new VectorRecord({\n        x: position % this.columns,\n        y: Math.floor((position / this.columns)),\n      })\n      : undefined\n  }\n\n  public getCell(vector: VectorRecord): CellRecord {\n    const cell = this.cells.get(vector.x + vector.y * this.columns)\n    if (!cell) {\n      throw new Error('CellRecord isn\\'t exist')\n    }\n    return cell\n  }\n\n  public setCell(vector: VectorRecord, cell: CellRecord): FieldRecord {\n    return this\n      .update(\n        'cells',\n        (cells) => cells.set(vector.x + vector.y * this.columns, cell))\n  }\n\n  public swapeCells(vectorOne: VectorRecord, vectorTwo: VectorRecord): FieldRecord {\n    const savedCellForSwape = this.getCell(vectorOne)\n    const field = this.setCell(\n      vectorOne,\n      this.getCell(vectorTwo),\n    )\n    return field.setCell(\n      vectorTwo,\n      savedCellForSwape,\n    )\n  }\n\n  public coalitionCells(vectorOne: VectorRecord, vectorTwo: VectorRecord): FieldRecord {\n    const field = this.setCell(\n      vectorTwo,\n      this.getCell(vectorTwo)\n        .set('id', this.getCell(vectorOne).id)\n        .update('value', (value) => ++value))\n    return field.setCell(\n      vectorOne,\n      CellRecord.init({ value: 0 }),\n    )\n  }\n\n  public hasCell(vector: VectorRecord): boolean {\n    if (\n      vector.x >= 0\n      && vector.y >= 0\n      && vector.x < this.columns\n      && vector.y < this.rows\n    ) {\n      return true\n    }\n    return false\n  }\n}\n","import { Record } from 'immutable'\n\nimport { FieldRecord } from '../field'\n\nimport { IFieldData } from './types'\n\nconst defaultFieldState: IFieldData = {\n  current: new FieldRecord(),\n  previous: new FieldRecord(),\n}\n\nexport class FieldDataRecord extends Record<IFieldData>(defaultFieldState) {}\n","import { Record } from 'immutable'\nimport { IFieldSettings } from './types'\n\nconst defaultFieldSettings: IFieldSettings = {\n  rows: 3,\n  columns: 3,\n}\n\nexport class FieldSettingsRecord extends Record<IFieldSettings>(defaultFieldSettings) {}\n","import { Record } from 'immutable'\n\nimport { VectorRecord } from '../vector'\n\nimport { IRecordElement } from './types'\n\nconst defaultRecordElementValue: IRecordElement = {\n  position: new VectorRecord(),\n  value: 0,\n}\n\nexport class RecordElementRecord extends Record<IRecordElement>(defaultRecordElementValue) {}\n","import { Record, List } from 'immutable'\n\nimport { FieldRecord } from '../field'\nimport { VectorRecord } from '../vector'\n\nimport { IFieldState } from './types'\nimport { RecordElementRecord } from '../recordElement'\n\nconst defaultFieldState: IFieldState = {\n  records: List(),\n}\n\nexport class FieldStateRecord extends Record<IFieldState>(defaultFieldState) {\n  public updateRecordValue(field: FieldRecord): this {\n    return this\n      .update('records', (records) => {\n        let recordPosition = new VectorRecord({\n          x: field.columns,\n          y: field.rows,\n        })\n        recordPosition = field.columns > field.rows\n          ? recordPosition\n          : recordPosition.image()\n        const prevRecordValue = this.getRecordByPosition(recordPosition)\n        const cellsValueSum = field.getCellsSumValue()\n        if (prevRecordValue) {\n          if (cellsValueSum > prevRecordValue.value) {\n            return records.update(\n              records.findIndex((record) => record.position === recordPosition),\n              (record) => record.set('value', cellsValueSum),\n            )\n          }\n          return records\n        }\n        return records.push(\n          new RecordElementRecord({\n            position: recordPosition,\n          }),\n        )\n      })\n  }\n\n  public getRecordByPosition(position: VectorRecord): RecordElementRecord | undefined {\n    return this.records.find((record) => record.position.equals(position))\n  }\n}\n","import { List } from 'immutable'\nimport { createStandardAction } from 'typesafe-actions'\n\nimport { RecordElementRecord } from '../../models/recordElement'\n\nexport const setFieldRecordsAction = createStandardAction('state/SET_RECORDS')<List<RecordElementRecord>>()\n","import * as FieldActions from '../Containers/Game/actions'\nimport * as FieldSettingActions from '../Containers/Settings/actions'\nimport * as FieldRecordsActions from '../Containers/State/actions'\n\nexport default {\n  field: FieldActions,\n  settings: FieldSettingActions,\n  state: FieldRecordsActions,\n}\n","import field from '../Containers/Game/reducer'\nimport settings from '../Containers/Settings/reducer'\nimport state from '../Containers/State/reducer'\n\nimport { combineReducers } from 'redux'\n\nconst rootReducer = combineReducers({\n  field,\n  settings,\n  state,\n})\n\nexport default rootReducer\n","import { ActionType, getType } from 'typesafe-actions'\n\nimport { FieldDataRecord } from '../../models/data'\n\nimport * as fieldActions from './actions'\n\nexport type FieldActions = ActionType<typeof fieldActions>\n\nexport default (state = new FieldDataRecord(), action: FieldActions): FieldDataRecord => {\n  switch (action.type) {\n    case getType(fieldActions.setCurrentFieldAction):\n      return state.set('current', action.payload)\n    case getType(fieldActions.setPreviousFieldAction):\n      return state.set('previous', action.payload)\n    default:\n      return state\n  }\n}\n","import { ActionType, getType } from 'typesafe-actions'\n\nimport { FieldSettingsRecord } from '../../models/settings'\n\nimport * as fieldSettingActions from './actions'\n\nexport type FieldAction = ActionType<typeof fieldSettingActions>\n\nexport default (state = new FieldSettingsRecord(), action: FieldAction): FieldSettingsRecord => {\n  switch (action.type) {\n    case (getType(fieldSettingActions.setFieldRowsAction)):\n      return state.set('rows', action.payload)\n    case (getType(fieldSettingActions.setFieldColumnsAction)):\n      return state.set('columns', action.payload)\n    default:\n      return state\n  }\n}\n","import { ActionType, getType } from 'typesafe-actions'\n\nimport { FieldStateRecord } from '../../models/state'\nimport actions from '../../store/actions'\n\nexport type Actions = ActionType<typeof actions>\n\nexport default (state = new FieldStateRecord(), action: Actions): FieldStateRecord => {\n  switch (action.type) {\n    case getType(actions.field.setCurrentFieldAction):\n      return state.updateRecordValue(action.payload)\n    case getType(actions.state.setFieldRecordsAction):\n      return state.set('records', action.payload)\n    default:\n      return state\n  }\n}\n","import { VectorRecord } from '../../models/vector'\nimport { FieldRecord } from '../../models/field'\n\nexport function selectIterationStartPoint(\n  field: FieldRecord,\n  diraction: VectorRecord,\n): VectorRecord {\n  const Deg90 = Math.PI / 2\n  const turned90DegDiraction = diraction.turn(Deg90)\n  const x: number = turned90DegDiraction.x > 0 || diraction.x > 0\n    ? 0\n    : field.columns - 1\n  const y: number = turned90DegDiraction.y > 0 || diraction.y > 0\n    ? 0\n    : field.rows - 1\n\n  return new VectorRecord({ x, y })\n}\n","import { selectIterationStartPoint } from './iteratetion'\n\nimport { FieldRecord } from '../../models/field'\nimport { VectorRecord } from '../../models/vector'\n\nexport default function cellsMover(\n  field: FieldRecord,\n  diraction: VectorRecord,\n): FieldRecord {\n  let iterPoint = selectIterationStartPoint(field, diraction)\n\n  const Deg90 = Math.PI / 2\n  const turned90DegDiraction = diraction.turn(Deg90)\n\n  let postIterPoint: VectorRecord\n  while (field.hasCell(iterPoint)) {\n    postIterPoint = iterPoint\n\n    if (field.hasCell(iterPoint.plus(diraction))) {\n      iterPoint = iterPoint.plus(diraction)\n\n      while (\n        field.getCell(iterPoint).value > 0\n        && field.getCell(postIterPoint).value === 0\n      ) {\n        field = field.swapeCells(postIterPoint, iterPoint)\n\n        while (field.hasCell(iterPoint.minus(diraction))) {\n          iterPoint = iterPoint.minus(diraction)\n        }\n      }\n    } else {\n      iterPoint = iterPoint.plus(turned90DegDiraction)\n\n      while (field.hasCell(iterPoint.minus(diraction))) {\n        iterPoint = iterPoint.minus(diraction)\n      }\n    }\n  }\n\n  return field\n}\n","import cellsMover from './utils/cellsMover'\nimport cellsColitions from './utils/cellsColitions'\n\nimport { FieldRecord } from '../models/field'\nimport { VectorRecord } from '../models/vector'\n\nexport default function doNextGameStep(field: FieldRecord, diraction: VectorRecord) {\n  field = cellsMover(field, diraction)\n  field = cellsColitions(field, diraction)\n  field = cellsMover(field, diraction)\n  return field\n}\n","import { selectIterationStartPoint } from './iteratetion'\n\nimport { FieldRecord } from '../../models/field'\nimport { VectorRecord } from '../../models/vector'\n\nexport default function cellsColitions(\n  field: FieldRecord,\n  diraction: VectorRecord,\n): FieldRecord {\n  let iterPoint = selectIterationStartPoint(field, diraction)\n\n  const Deg90 = Math.PI / 2\n  const turned90DegDiraction = diraction.turn(Deg90)\n\n  let postIterPoint: VectorRecord\n  while (field.hasCell(iterPoint)) {\n    postIterPoint = iterPoint\n\n    if (field.hasCell(iterPoint.plus(diraction))) {\n      iterPoint = iterPoint.plus(diraction)\n\n      if (\n        field.getCell(iterPoint).value > 0 &&\n        field.getCell(postIterPoint).value === field.getCell(iterPoint).value\n      ) {\n        field = field.coalitionCells(iterPoint, postIterPoint)\n\n      }\n    } else {\n      iterPoint = iterPoint.plus(turned90DegDiraction)\n\n      while (field.hasCell(iterPoint.minus(diraction))) {\n        iterPoint = iterPoint.minus(diraction)\n      }\n    }\n  }\n\n  return field\n}\n","import { FieldRecord } from '../models/field'\nimport { CellRecord } from '../models/cell'\n\nexport default function selectRandomAvaibleCellPoint(field: FieldRecord): FieldRecord {\n  const avaibleCells = field.cells.filter((cell) => cell.value === 0)\n  const randonAvaibleCellIndex = Math.floor(Math.random() * avaibleCells.size)\n  const selectedCell = avaibleCells.get(randonAvaibleCellIndex)\n  const cellsIndex = field.cells.findIndex((cell) => cell === selectedCell)\n\n  return avaibleCells.size > 0\n    ? field.update(\n        'cells',\n        (cells) => cells.set(\n          cellsIndex,\n          CellRecord.init({\n            value: Math.random() > 0.8 ? 2 : 1,\n          })))\n    : field\n}\n","import { VectorRecord } from '.'\n\nexport const DIRACTIONS = {\n  RIGHT: new VectorRecord({ x: 1, y: 0 }),\n  LEFT: new VectorRecord({ x: -1, y: 0 }),\n  UP: new VectorRecord({ x: 0, y: 1 }),\n  DOWN: new VectorRecord({ x: 0, y: -1 }),\n  NULL: new VectorRecord({ x: 0, y: 0 }),\n}\n","import { fromEvent } from 'rxjs'\nimport {\n  map,\n  filter,\n} from 'rxjs/operators'\nimport { DIRACTIONS } from '../../../models/vector/constants'\nimport {\n  moveCellsAction,\n  returnPrevFieldAction,\n} from '../actions'\nimport { Epic } from '../../../store/types'\n\nconst keyboard$ = fromEvent<KeyboardEvent>(window, 'keydown')\n\nexport const moveDiractionFromKeyboardEventEpic: Epic = () => keyboard$.pipe(\n  map((event: KeyboardEvent) => {\n    if (event.key === 'w' || event.key === 'ц' || event.key === 'ArrowUp') {\n      return DIRACTIONS.UP\n    } else if (event.key === 'd' || event.key === 'в' || event.key === 'ArrowRight') {\n      return DIRACTIONS.LEFT\n    } else if (event.key === 's' || event.key === 'ы' || event.key === 'ArrowDown') {\n      return DIRACTIONS.DOWN\n    } else if (event.key === 'a' || event.key === 'ф' || event.key === 'ArrowLeft') {\n      return DIRACTIONS.RIGHT\n    }\n    return DIRACTIONS.NULL\n  }),\n  filter((diraction) => !diraction.equals(DIRACTIONS.NULL)),\n  map((diraction) => moveCellsAction(diraction)),\n)\n\nexport const returnPrevFieldFromKeyboardEventEpic: Epic = () => keyboard$.pipe(\n  map((event: KeyboardEvent) => {\n    if (event.key === 'Backspace') {\n      return true\n    }\n    return false\n  }),\n  filter((diraction) => diraction),\n  map(() => returnPrevFieldAction()),\n)\n","import { List } from 'immutable'\n\nimport { RootState } from './types'\n\nimport { CellRecord } from '../models/cell'\nimport { FieldRecord } from '../models/field'\nimport { VectorRecord } from '../models/vector'\nimport { FieldDataRecord } from '../models/data'\nimport { FieldStateRecord } from '../models/state'\nimport { FieldSettingsRecord } from '../models/settings'\nimport { RecordElementRecord } from '../models/recordElement'\n\nimport { debounce } from '../utils'\n\nexport const loadState = (): RootState | undefined => {\n  try {\n    const serializedState = localStorage.getItem('state')\n\n    if (serializedState === null) {\n      return undefined\n    }\n    const parsedSerializedState = JSON.parse(serializedState)\n\n    const deserializedState = {\n      field: new FieldDataRecord({\n        current: new FieldRecord({\n          ...parsedSerializedState.field.current,\n          cells: List(parsedSerializedState.field.current.cells.map(\n            (cell: any) => new CellRecord(cell),\n          )),\n        }),\n        previous: new FieldRecord({\n          ...parsedSerializedState.field.current,\n          cells: List(parsedSerializedState.field.current.cells.map(\n            (cell: any) => new CellRecord(cell),\n          )),\n        }),\n      }),\n      settings: new FieldSettingsRecord(parsedSerializedState.settings),\n      state: new FieldStateRecord({\n        records: List(parsedSerializedState.state.records.map((record: any) => new RecordElementRecord({\n          ...record,\n          position: new VectorRecord(record.position),\n        }))),\n      }),\n    }\n    return deserializedState\n  } catch (err) {\n    return undefined\n  }\n}\n\nexport const saveState = (state: RootState) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem('state', serializedState)\n  } catch {\n    // ignore write errors\n  }\n}\n\nexport const debouncedSaveState = debounce(saveState, 1000)\n","export type Procedure = (...args: any[]) => void\n\nexport interface IOptions {\n  isImmediate: boolean,\n}\n\nexport function debounce<F extends Procedure>(\n  func: F,\n  waitMilliseconds = 50,\n  options: IOptions = {\n    isImmediate: false,\n  },\n): F {\n  let timeoutId: NodeJS.Timeout | undefined\n\n  return function(this: any, ...args: any[]) {\n    const context = this\n\n    const doLater = () => {\n      timeoutId = undefined\n      if (!options.isImmediate) {\n        func.apply(context, args)\n      }\n    }\n\n    const shouldCallNow = options.isImmediate && timeoutId === undefined\n\n    if (timeoutId !== undefined) {\n      clearTimeout(timeoutId)\n    }\n\n    timeoutId = setTimeout(doLater, waitMilliseconds)\n\n    if (shouldCallNow) {\n      func.apply(context, args)\n    }\n  } as any\n}\n","import { of } from 'rxjs'\nimport { filter, switchMap } from 'rxjs/operators'\n\nimport { Epic } from '../../../store/types'\nimport actions from '../../../store/actions'\nimport { isActionOf } from 'typesafe-actions'\nimport { FieldRecord } from '../../../models/field'\nimport selectRandomAvaibleCellPoint from '../../../engine/selectRandomAvaibleCellIndex'\nimport { loadState } from '../../../store/utils'\n\nexport const initFieldEpic: Epic = (action$, state$) =>\n  action$\n    .pipe(\n      filter(isActionOf(actions.field.initFieldAction)),\n      switchMap(() => {\n        const {\n          columns,\n          rows,\n        } = state$.value.settings\n        let field = FieldRecord.init({columns, rows})\n        field = selectRandomAvaibleCellPoint(field)\n        return of(\n          actions.field.setCurrentFieldAction(field),\n          actions.field.setPreviousFieldAction(field),\n        )\n      }),\n    )\n\nexport const initFieldFromLocalStorageEpic: Epic = (action$) =>\n  action$\n    .pipe(\n      filter(isActionOf(actions.field.initFieldFromLocalStorageAction)),\n      switchMap(() => {\n        const stateFromLocalStorage = loadState()\n        return stateFromLocalStorage\n          ? of(\n              actions.field.setCurrentFieldAction(stateFromLocalStorage.field.current),\n              actions.field.setPreviousFieldAction(stateFromLocalStorage.field.previous),\n              actions.settings.setFieldSettingsAction({\n                rows: stateFromLocalStorage.settings.rows,\n                columns: stateFromLocalStorage.settings.columns,\n              }),\n              actions.state.setFieldRecordsAction(stateFromLocalStorage.state.records),\n            )\n          : of(actions.field.initFieldAction())\n      }),\n    )\n","import { of, empty } from 'rxjs'\nimport { filter, debounceTime, switchMap } from 'rxjs/operators'\n\nimport { Epic } from '../../../store/types'\nimport actions from '../../../store/actions'\nimport { isActionOf } from 'typesafe-actions'\nimport { doNextGameStep } from '../../../engine'\nimport selectRandomAvaibleCellPoint from '../../../engine/selectRandomAvaibleCellIndex'\n\nexport * from './keyboardEpics'\n\nexport * from './initEpics'\n\nexport const moveFieldEpic: Epic = (action$, state$) =>\n  action$\n    .pipe(\n      filter(isActionOf(actions.field.moveCellsAction)),\n      debounceTime(100),\n      switchMap(({payload}) => {\n        const savedField = state$.value.field.current\n        let changedField = doNextGameStep(savedField, payload)\n        if (!changedField.cells.equals(savedField.cells)) {\n          changedField = selectRandomAvaibleCellPoint(changedField)\n          return of(\n            actions.field.setCurrentFieldAction(changedField),\n            actions.field.setPreviousFieldAction(savedField),\n          )\n        }\n        return empty()\n      }),\n    )\n\nexport const returnPrevFieldEpic: Epic = (action$, state$) =>\n  action$\n    .pipe(\n      filter(isActionOf(actions.field.returnPrevFieldAction)),\n      switchMap(() => {\n        const fieldState = state$.value.field\n        const prevField = fieldState.previous\n        return of(actions.field.setCurrentFieldAction(prevField))\n      }),\n    )\n","import { of } from 'rxjs'\nimport { isActionOf } from 'typesafe-actions'\nimport { filter, switchMap } from 'rxjs/operators'\n\nimport { Epic } from '../../store/types'\nimport actions from '../../store/actions'\n\nexport const moveFieldEpic: Epic = (action$) =>\n  action$\n    .pipe(\n      filter(isActionOf(actions.settings.setFieldSettingsAction)),\n      switchMap(({ payload }) => {\n        localStorage.clear()\n        return of(\n          actions.settings.setFieldRowsAction(payload.rows),\n          actions.settings.setFieldColumnsAction(payload.columns),\n        )\n      }),\n    )\n","import { combineEpics } from 'redux-observable'\n\nimport * as fieldEpics from '../Containers/Game/epics'\nimport * as fieldSettingsEpics from '../Containers/Settings/epics'\n\nexport default combineEpics(\n  ...Object.values(fieldEpics),\n  ...Object.values(fieldSettingsEpics),\n)\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport { createEpicMiddleware } from 'redux-observable'\n\nimport rootReducer from './reducers'\nimport rootEpic from './epics'\nimport { RootActions, RootState } from './types'\nimport { debouncedSaveState } from './utils'\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport const epicMiddleware = createEpicMiddleware<RootActions, RootActions, RootState>()\n\nconst initialState = {}\n\nconst middleware = [epicMiddleware]\n\nexport const store = createStore(\n  rootReducer,\n  initialState,\n  composeEnhancers(\n    applyMiddleware(...middleware),\n  ),\n)\nepicMiddleware.run(rootEpic)\n\nstore.subscribe(() => {\n  debouncedSaveState(store.getState())\n})\n","import React from 'react'\nimport { Router } from 'react-router-dom'\nimport { StoreContext } from 'redux-react-hook'\nimport { ThemeProvider } from '@material-ui/styles'\nimport CssBaseline from '@material-ui/core/CssBaseline'\n\nimport { theme } from '../theme'\nimport { store } from '../../store'\nimport history from '../history'\n\ninterface IProps {\n  children: React.ReactNode,\n}\n\nconst Providers = ({ children }: IProps) => (\n  <ThemeProvider theme={theme}>\n    <StoreContext.Provider value={store}>\n      <Router history={history}>\n        <CssBaseline />\n        {children}\n      </Router>\n    </StoreContext.Provider>\n  </ThemeProvider>\n)\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport Layout from './Components/Layout'\nimport Providers from './setup/Providers'\n\nconst App = () => (\n  <Providers>\n    <Layout />\n  </Providers>\n)\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}